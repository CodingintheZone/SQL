-- Creating fitness activity table to query different request.
CREATE TABLE exercise_logs
    (id INTEGER PRIMARY KEY AUTOINCREMENT,
    type TEXT,
    minutes INTEGER, 
    calories INTEGER,
    heart_rate INTEGER);

INSERT INTO exercise_logs(type, minutes, calories, heart_rate) VALUES ("biking", 30, 115, 110);
INSERT INTO exercise_logs(type, minutes, calories, heart_rate) VALUES ("biking", 10, 45, 105);
INSERT INTO exercise_logs(type, minutes, calories, heart_rate) VALUES ("dancing", 15, 200, 120);
INSERT INTO exercise_logs(type, minutes, calories, heart_rate) VALUES ("dancing", 15, 165, 120);
INSERT INTO exercise_logs(type, minutes, calories, heart_rate) VALUES ("tree climbing", 30, 70, 90);
INSERT INTO exercise_logs(type, minutes, calories, heart_rate) VALUES ("tree climbing", 25, 72, 80);
INSERT INTO exercise_logs(type, minutes, calories, heart_rate) VALUES ("rowing", 30, 70, 90);
INSERT INTO exercise_logs(type, minutes, calories, heart_rate) VALUES ("hiking", 60, 80, 85);

SELECT * 
FROM exercise_logs;

-- Query total calories burned within all exercises 
SELECT type, SUM(calories) AS total_calories 
FROM exercise_logs 
GROUP BY type;

-- Query activities burning > 150 calories
SELECT type, SUM(calories) AS total_calories 
FROM exercise_logs
    GROUP BY type
    HAVING total_calories > 150;

-- Querying activity data averaging > 70 calories 
SELECT type, AVG(calories) AS avg_calories 
FROM exercise_logs
    GROUP BY type
    HAVING avg_calories > 70; 
    
-- Querying activities completed more than once
SELECT type 
FROM exercise_logs 
GROUP BY type HAVING COUNT(*) >= 2;

-- Checking if heartrate at the danger zone (max)
SELECT COUNT(*) FROM exercise_logs WHERE heart_rate > 220 - 30;

-- 50-90% of max HR
SELECT COUNT(*) FROM exercise_logs WHERE
    heart_rate >= ROUND(0.50 * (220-30)) 
    AND  heart_rate <= ROUND(0.90 * (220-30));
    
-- Case
SELECT type, heart_rate,
    CASE 
        WHEN heart_rate > 220-30 THEN "above max"
        WHEN heart_rate > ROUND(0.90 * (220-30))
THEN "above target"
        WHEN heart_rate > ROUND(0.50 * (220-30)) 
THEN "within target"
        ELSE "below target"
    END as "hr_zone"
FROM exercise_logs;

SELECT COUNT(*),
    CASE 
        WHEN heart_rate > 220-30 THEN "above max"
        WHEN heart_rate > ROUND(0.90 * (220-30)) 
THEN "above target"
        WHEN heart_rate > ROUND(0.50 * (220-30)) 
THEN "within target"
        ELSE "below target"
    END as "hr_zone"
FROM exercise_logs
GROUP BY hr_zone;
